---
- name: Facts subnet
  ec2_vpc_subnet_facts:
    region: "{{ ec2_etc.region }}"
  register: _subnet_facts
- debug: var=_subnet_facts verbosity=1
- name: launch instance
  ec2:
    image: "{{ item.image }}"
    instance_profile_name: "{{ item.instance_profile_name }}"
    instance_type: "{{ item.instance_type }}"
    key_name: "{{ item.key_name }}"
    vpc_subnet_id: "{{ _subnet_facts.subnets | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', item.subnet_name) |  map(attribute='id') | first }}"
    group: "{{ item.group }}"
    volumes: "{{ item.volumes }}"
    instance_tags:
      Name: "{{ item.name }}"
      env: "{{ item.env }}"
      role: "{{ item.role }}"
    count_tag:
      Name: "{{ item.name }}"
    exact_count: "{{ item.exact_count }}" 
    assign_public_ip: "{{ item.assign_public_ip }}"
    region: "{{ item.region }}"
    user_data: "{{ item.user_data }}"
  with_items: "{{ ec2.instances }}"
  register: _ec2
- debug: var=_ec2 verbosity=1

- name: wait for the servers to appear on the network
  wait_for: 
    host: "{{ item.tagged_instances[0].private_ip }}"
    port: 22 
    delay: 1 
    timeout: 320 
    state: started
  with_items: "{{ _ec2.results }}"

- name: associate an elastic IP with an instance
  ec2_eip:
    device_id: "{{ _ec2.results[0].tagged_instances[0].id }}"
    region: "{{ ec2_etc.region }}"
    ip: "{{ ec2.eip.ip }}"
  when:
    - ec2.eip is defined
  register: _eip
- debug: var=_eip verbosity=1

- name: add new instance to host group
  add_host:
    hostname: "{{ item.tagged_instances[0].private_ip }}"
    groupname: launched
  with_items: "{{ _ec2.results }}"
  changed_when: False
  register: _launched
- debug: var=_launched verbosity=1

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.tagged_instances[0].private_ip }}"
    port: 22
    delay: 1
    timeout: 320
    state: started
  with_items: "{{ _ec2.results }}"
